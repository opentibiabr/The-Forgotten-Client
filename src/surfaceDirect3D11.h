/*
  The Forgotten Client
  Copyright (C) 2020 Saiyans King

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.
*/

#ifndef __FILE_SURFACE_DIRECT3D11_h_
#define __FILE_SURFACE_DIRECT3D11_h_

#include "engine.h"

#if defined(SDL_VIDEO_RENDER_D3D11)

#define DIRECT3D11_MAX_VERTICES 43656
#define DIRECT3D11_MAX_INDICES (DIRECT3D11_MAX_VERTICES * 6 / 4)
#if DIRECT3D11_MAX_INDICES >= 65500
#define DIRECT3D11_USE_UINT_INDICES 1
#else
#define DIRECT3D11_USE_UINT_INDICES 0
#endif

typedef struct
{
	float pv_11, pv_12, pv_13, pv_14;
	float pv_21, pv_22, pv_23, pv_24;
	float pv_31, pv_32, pv_33, pv_34;
	float pv_41, pv_42, pv_43, pv_44;
} VertexShaderConstants;

struct VertexD3D11
{
	VertexD3D11(float x, float y, float u, float v, DWORD color) : x(x), y(y), color(color), u(u), v(v) {}
	VertexD3D11(float x, float y, DWORD color) : x(x), y(y), color(color), u(0.0f), v(0.0f) {}

	float x, y;
	float u, v;
	DWORD color;
};

struct Direct3D11Texture
{
	Direct3D11Texture() : m_texture(NULL), m_resource(NULL), m_frameBuffer(NULL) {}

	operator bool() const {return m_texture;}

	// non-copyable
	Direct3D11Texture(const Direct3D11Texture&) = delete;
	Direct3D11Texture& operator=(const Direct3D11Texture&) = delete;

	// moveable
	Direct3D11Texture(Direct3D11Texture&& rhs) noexcept : m_texture(rhs.m_texture), m_resource(rhs.m_resource), m_frameBuffer(rhs.m_frameBuffer),
		m_width(rhs.m_width), m_height(rhs.m_height), m_scaleW(rhs.m_scaleW), m_scaleH(rhs.m_scaleH), m_linearSample(rhs.m_linearSample)
	{
		rhs.m_texture = NULL;
		rhs.m_resource = NULL;
		rhs.m_frameBuffer = NULL;
	}
	Direct3D11Texture& operator=(Direct3D11Texture&& rhs) noexcept
	{
		if(this != &rhs)
		{
			m_texture = rhs.m_texture;
			m_resource = rhs.m_resource;
			m_frameBuffer = rhs.m_frameBuffer;
			m_width = rhs.m_width;
			m_height = rhs.m_height;
			m_scaleW = rhs.m_scaleW;
			m_scaleH = rhs.m_scaleH;
			m_linearSample = rhs.m_linearSample;
			rhs.m_texture = NULL;
			rhs.m_resource = NULL;
			rhs.m_frameBuffer = NULL;
		}
		return (*this);
	}

	void* m_texture;
	void* m_resource;
	void* m_frameBuffer;
	Uint32 m_width;
	Uint32 m_height;
	float m_scaleW;
	float m_scaleH;
	bool m_linearSample;
};

struct Direct3D11SpriteData
{
	Direct3D11SpriteData() : m_xOffset(0), m_yOffset(0), m_surface(0), m_lastUsage(0) {}

	Uint32 m_xOffset;
	Uint32 m_yOffset;
	Uint32 m_surface;
	Uint32 m_lastUsage;
};

typedef robin_hood::unordered_map<Uint32, Direct3D11Texture> U32BD3D11Textures;
typedef robin_hood::unordered_map<Uint64, Direct3D11SpriteData> U64BD3D11Textures;

class SurfaceDirect3D11 : public Surface
{
	public:
		SurfaceDirect3D11();
		virtual ~SurfaceDirect3D11();

		// non-copyable
		SurfaceDirect3D11(const SurfaceDirect3D11&) = delete;
		SurfaceDirect3D11& operator=(const SurfaceDirect3D11&) = delete;

		// non-moveable
		SurfaceDirect3D11(const SurfaceDirect3D11&&) = delete;
		SurfaceDirect3D11& operator=(const SurfaceDirect3D11&&) = delete;

		bool createDirect3DTexture(Direct3D11Texture& texture, Uint32 width, Uint32 height, bool linearSampler, bool frameBuffer = false);
		bool updateTextureData(Direct3D11Texture& texture, unsigned char* data);
		void releaseDirect3DTexture(Direct3D11Texture& texture);
		void updateTextureScaling(Direct3D11Texture& texture);

		HRESULT createSwapChain(int w, int h);
		void createWindowSizeDependentResources();
		void updateViewport();

		bool updateVertexBuffer(const void* vertexData, size_t dataSize);
		bool createVertexShader(void* d3dDevice, void** vertexShader, void** inputLayout);
		bool createPixelShader(void* d3dDevice, const void* shader_data, size_t shader_size, void** pixelShader);

		virtual bool isSupported();
		virtual const char* getName() {return "Direct3D11";}
		virtual const char* getSoftware() {return m_software;}
		virtual const char* getHardware() {return m_hardware;}
		virtual Uint32 getVRAM() {return m_totalVRAM;}

		void generateSpriteAtlases();

		virtual void init();
		virtual void doResize(Sint32 w, Sint32 h);
		virtual void spriteManagerReset();
		virtual unsigned char* getScreenPixels(Sint32& width, Sint32& height, bool& bgra);

		virtual void beginScene();
		virtual void endScene();

		Direct3D11Texture* getTextureIndex(Direct3D11Texture* texture);
		void drawQuad(Direct3D11Texture* texture, float vertices[8], float texcoords[8]);
		void drawQuad(Direct3D11Texture* texture, float vertices[8], float texcoords[8], DWORD color);
		void scheduleBatch();

		bool integer_scaling(Sint32 sx, Sint32 sy, Sint32 sw, Sint32 sh, Sint32 x, Sint32 y, Sint32 w, Sint32 h);
		virtual void drawLightMap_old(LightMap* lightmap, Sint32 x, Sint32 y, Sint32 scale, Sint32 width, Sint32 height);
		virtual void drawLightMap_new(LightMap* lightmap, Sint32 x, Sint32 y, Sint32 scale, Sint32 width, Sint32 height);
		virtual void drawGameScene(Sint32 sx, Sint32 sy, Sint32 sw, Sint32 sh, Sint32 x, Sint32 y, Sint32 w, Sint32 h);
		virtual void beginGameScene();
		virtual void endGameScene();

		virtual void setClipRect(Sint32 x, Sint32 y, Sint32 w, Sint32 h);
		virtual void disableClipRect();
		virtual void drawRectangle(Sint32 x, Sint32 y, Sint32 w, Sint32 h, Sint32 lineWidth, Uint8 r, Uint8 g, Uint8 b, Uint8 a);
		virtual void fillRectangle(Sint32 x, Sint32 y, Sint32 w, Sint32 h, Uint8 r, Uint8 g, Uint8 b, Uint8 a);

		Direct3D11Texture* loadPicture(Uint16 pictureId, bool linear);
		virtual void drawFont(Uint16 pictureId, Sint32 x, Sint32 y, const std::string& text, size_t pos, size_t len, Uint8 r, Uint8 g, Uint8 b, Sint16 cX[256], Sint16 cY[256], Sint16 cW[256], Sint16 cH[256]);
		virtual void drawBackground(Uint16 pictureId, Sint32 sx, Sint32 sy, Sint32 sw, Sint32 sh, Sint32 x, Sint32 y, Sint32 w, Sint32 h);
		virtual void drawPictureRepeat(Uint16 pictureId, Sint32 sx, Sint32 sy, Sint32 sw, Sint32 sh, Sint32 x, Sint32 y, Sint32 w, Sint32 h);
		virtual void drawPicture(Uint16 pictureId, Sint32 sx, Sint32 sy, Sint32 x, Sint32 y, Sint32 w, Sint32 h);

		bool loadSprite(Uint32 spriteId, Direct3D11Texture* texture, Uint32 xoff, Uint32 yoff);
		bool loadSpriteMask(Uint32 spriteId, Uint32 maskSpriteId, Uint32 outfitColor, Direct3D11Texture* texture, Uint32 xoff, Uint32 yoff);
		virtual void drawSprite(Uint32 spriteId, Sint32 x, Sint32 y);
		virtual void drawSprite(Uint32 spriteId, Sint32 x, Sint32 y, Sint32 w, Sint32 h, Sint32 sx, Sint32 sy, Sint32 sw, Sint32 sh);
		virtual void drawSpriteMask(Uint32 spriteId, Uint32 maskSpriteId, Sint32 x, Sint32 y, Uint32 outfitColor);
		virtual void drawSpriteMask(Uint32 spriteId, Uint32 maskSpriteId, Sint32 x, Sint32 y, Sint32 w, Sint32 h, Sint32 sx, Sint32 sy, Sint32 sw, Sint32 sh, Uint32 outfitColor);

		Direct3D11Texture* createAutomapTile(Uint32 currentArea);
		void uploadAutomapTile(Direct3D11Texture* texture, Uint8 color[256][256]);
		virtual void drawAutomapTile(Uint32 m_currentArea, bool& m_recreate, Uint8 m_color[256][256], Sint32 x, Sint32 y, Sint32 w, Sint32 h, Sint32 sx, Sint32 sy, Sint32 sw, Sint32 sh);

	protected:
		std::vector<VertexD3D11> m_vertices;
		std::vector<Direct3D11Texture> m_spritesAtlas;
		U32BD3D11Textures m_automapTiles;
		U64BD3D11Textures m_sprites;
		std::circular_buffer<Uint32, MAX_AUTOMAPTILES> m_automapTilesBuff;
		std::circular_buffer<Uint64, MAX_SPRITES> m_spritesIds;

		Direct3D11Texture* m_pictures = NULL;
		const char* m_software = "Direct3D";
		char* m_hardware = NULL;

		Direct3D11Texture m_gameWindow;
		Direct3D11Texture m_scaled_gameWindow;
		Direct3D11Texture* m_binded_texture = NULL;

		#ifndef SDL_VIDEO_DRIVER_WINRT
		void* m_d3d11Handle;
		void* m_dxgiHandle;
		#endif

		void* m_dxgiFactory = NULL;
		void* m_dxgiAdapter = NULL;
		void* m_swapChain = NULL;
		void* m_device = NULL;
		void* m_context = NULL;

		void* m_samplers[2] = {};
		void* m_mainRasterizer = NULL;
		void* m_clippedRasterizer = NULL;
		void* m_inputLayout = NULL;
		void* m_vertexShader = NULL;
		void* m_pixelShaderSolid = NULL;
		void* m_pixelShaderTexture = NULL;
		void* m_pixelShaderSharpen = NULL;

		void* m_blendBlend = NULL;
		void* m_blendAdd = NULL;
		void* m_blendMod = NULL;

		void* m_mainRenderTargetView = NULL;
		void* m_currentRenderTargetView = NULL;

		void* m_pixelShaderConstants = NULL;
		void* m_vertexShaderConstants = NULL;
		void* m_indexBuffer = NULL;
		void* m_vertexBuffer = NULL;
		size_t m_vertexBufferSize = 0;

		VertexShaderConstants m_vertexShaderConstantsData;

		Sint32 m_maxTextureSize = 0;
		Sint32 m_integer_scaling_width = 0;
		Sint32 m_integer_scaling_height = 0;

		Uint32 m_totalVRAM = 0;
		Uint32 m_spriteChecker = 0;
		Uint32 m_currentFrame = 0;
		Uint32 m_cachedVertices = 0;

		Uint32 m_spriteAtlases = 0;
		Uint32 m_spritesPerAtlas = 0;
		Uint32 m_spritesPerModulo = 0;

		Sint32 m_viewPortX = 0;
		Sint32 m_viewPortY = 0;
		Sint32 m_viewPortW = 0;
		Sint32 m_viewPortH = 0;

		bool m_usingLinearSample = false;
		bool m_needReset = true;
		bool m_haveSharpening = false;
		bool m_useOldDXGIinterface = false;
};

#if WINAPI_FAMILY != WINAPI_FAMILY_PHONE_APP
#define D3D11_USE_SHADER_MODEL_4_0_level_9_3
#else
#define D3D11_USE_SHADER_MODEL_4_0_level_9_1
#endif

#if defined(D3D11_USE_SHADER_MODEL_4_0_level_9_1)
static const DWORD D3D11_PixelShader_Solid[] =
{
	0x43425844, 0x038e1346, 0x2a7641d2, 0x5e280537, 0xff0ed997, 0x00000001,
	0x00000234, 0x00000006, 0x00000038, 0x00000084, 0x000000c4, 0x00000140,
	0x0000018c, 0x00000200, 0x396e6f41, 0x00000044, 0x00000044, 0xffff0200,
	0x00000020, 0x00000024, 0x00240000, 0x00240000, 0x00240000, 0x00240000,
	0x00240000, 0xffff0200, 0x0200001f, 0x80000000, 0xb00f0001, 0x02000001,
	0x800f0800, 0xb0e40001, 0x0000ffff, 0x52444853, 0x00000038, 0x00000040,
	0x0000000e, 0x03001062, 0x001010f2, 0x00000002, 0x03000065, 0x001020f2,
	0x00000000, 0x05000036, 0x001020f2, 0x00000000, 0x00101e46, 0x00000002,
	0x0100003e, 0x54415453, 0x00000074, 0x00000002, 0x00000000, 0x00000000,
	0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x00000001, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000001, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x46454452, 0x00000044, 0x00000000, 0x00000000,
	0x00000000, 0x0000001c, 0xffff0400, 0x00008900, 0x0000001c, 0x7263694d,
	0x666f736f, 0x52282074, 0x4c482029, 0x53204c53, 0x65646168, 0x6f432072,
	0x6c69706d, 0x31207265, 0x00312e30, 0x4e475349, 0x0000006c, 0x00000003,
	0x00000008, 0x00000050, 0x00000000, 0x00000001, 0x00000003, 0x00000000,
	0x0000000f, 0x0000005c, 0x00000000, 0x00000000, 0x00000003, 0x00000001,
	0x00000003, 0x00000065, 0x00000000, 0x00000000, 0x00000003, 0x00000002,
	0x00000f0f, 0x505f5653, 0x5449534f, 0x004e4f49, 0x43584554, 0x44524f4f,
	0x4c4f4300, 0xab00524f, 0x4e47534f, 0x0000002c, 0x00000001, 0x00000008,
	0x00000020, 0x00000000, 0x00000000, 0x00000003, 0x00000000, 0x0000000f,
	0x545f5653, 0x45475241, 0xabab0054
};
#elif defined(D3D11_USE_SHADER_MODEL_4_0_level_9_3)
static const DWORD D3D11_PixelShader_Solid[] =
{
	0x43425844, 0x22b2535f, 0xb7f15161, 0x7f1392af, 0xcfcdb805, 0x00000001,
	0x00000234, 0x00000006, 0x00000038, 0x00000084, 0x000000c4, 0x00000140,
	0x0000018c, 0x00000200, 0x396e6f41, 0x00000044, 0x00000044, 0xffff0200,
	0x00000020, 0x00000024, 0x00240000, 0x00240000, 0x00240000, 0x00240000,
	0x00240000, 0xffff0201, 0x0200001f, 0x80000000, 0xb00f0001, 0x02000001,
	0x800f0800, 0xb0e40001, 0x0000ffff, 0x52444853, 0x00000038, 0x00000040,
	0x0000000e, 0x03001062, 0x001010f2, 0x00000002, 0x03000065, 0x001020f2,
	0x00000000, 0x05000036, 0x001020f2, 0x00000000, 0x00101e46, 0x00000002,
	0x0100003e, 0x54415453, 0x00000074, 0x00000002, 0x00000000, 0x00000000,
	0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x00000001, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000001, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x46454452, 0x00000044, 0x00000000, 0x00000000,
	0x00000000, 0x0000001c, 0xffff0400, 0x00008900, 0x0000001c, 0x7263694d,
	0x666f736f, 0x52282074, 0x4c482029, 0x53204c53, 0x65646168, 0x6f432072,
	0x6c69706d, 0x31207265, 0x00312e30, 0x4e475349, 0x0000006c, 0x00000003,
	0x00000008, 0x00000050, 0x00000000, 0x00000001, 0x00000003, 0x00000000,
	0x0000000f, 0x0000005c, 0x00000000, 0x00000000, 0x00000003, 0x00000001,
	0x00000003, 0x00000065, 0x00000000, 0x00000000, 0x00000003, 0x00000002,
	0x00000f0f, 0x505f5653, 0x5449534f, 0x004e4f49, 0x43584554, 0x44524f4f,
	0x4c4f4300, 0xab00524f, 0x4e47534f, 0x0000002c, 0x00000001, 0x00000008,
	0x00000020, 0x00000000, 0x00000000, 0x00000003, 0x00000000, 0x0000000f,
	0x545f5653, 0x45475241, 0xabab0054
};
#endif

#if defined(D3D11_USE_SHADER_MODEL_4_0_level_9_1)
static const DWORD D3D11_PixelShader_Texture[] =
{
	0x43425844, 0xc8dc4c50, 0xb34f60b3, 0xd53e0085, 0x8ba2efa0, 0x00000001,
	0x00000324, 0x00000006, 0x00000038, 0x000000c0, 0x0000015c, 0x000001d8,
	0x0000027c, 0x000002f0, 0x396e6f41, 0x00000080, 0x00000080, 0xffff0200,
	0x00000058, 0x00000028, 0x00280000, 0x00280000, 0x00280000, 0x00240001,
	0x00280000, 0x00000000, 0xffff0200, 0x0200001f, 0x80000000, 0xb0030000,
	0x0200001f, 0x80000000, 0xb00f0001, 0x0200001f, 0x90000000, 0xa00f0800,
	0x03000042, 0x800f0000, 0xb0e40000, 0xa0e40800, 0x03000005, 0x800f0000,
	0x80e40000, 0xb0e40001, 0x02000001, 0x800f0800, 0x80e40000, 0x0000ffff,
	0x52444853, 0x00000094, 0x00000040, 0x00000025, 0x0300005a, 0x00106000,
	0x00000000, 0x04001858, 0x00107000, 0x00000000, 0x00005555, 0x03001062,
	0x00101032, 0x00000001, 0x03001062, 0x001010f2, 0x00000002, 0x03000065,
	0x001020f2, 0x00000000, 0x02000068, 0x00000001, 0x09000045, 0x001000f2,
	0x00000000, 0x00101046, 0x00000001, 0x00107e46, 0x00000000, 0x00106000,
	0x00000000, 0x07000038, 0x001020f2, 0x00000000, 0x00100e46, 0x00000000,
	0x00101e46, 0x00000002, 0x0100003e, 0x54415453, 0x00000074, 0x00000003,
	0x00000001, 0x00000000, 0x00000003, 0x00000001, 0x00000000, 0x00000000,
	0x00000001, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000001, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x46454452, 0x0000009c,
	0x00000000, 0x00000000, 0x00000002, 0x0000001c, 0xffff0400, 0x00008900,
	0x00000072, 0x0000005c, 0x00000003, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000001, 0x00000001, 0x00000067, 0x00000002, 0x00000005,
	0x00000004, 0xffffffff, 0x00000000, 0x00000001, 0x0000000d, 0x53656874,
	0x6c706d61, 0x74007265, 0x65546568, 0x72757478, 0x694d0065, 0x736f7263,
	0x2074666f, 0x20295228, 0x4c534c48, 0x61685320, 0x20726564, 0x706d6f43,
	0x72656c69, 0x2e303120, 0xabab0031, 0x4e475349, 0x0000006c, 0x00000003,
	0x00000008, 0x00000050, 0x00000000, 0x00000001, 0x00000003, 0x00000000,
	0x0000000f, 0x0000005c, 0x00000000, 0x00000000, 0x00000003, 0x00000001,
	0x00000303, 0x00000065, 0x00000000, 0x00000000, 0x00000003, 0x00000002,
	0x00000f0f, 0x505f5653, 0x5449534f, 0x004e4f49, 0x43584554, 0x44524f4f,
	0x4c4f4300, 0xab00524f, 0x4e47534f, 0x0000002c, 0x00000001, 0x00000008,
	0x00000020, 0x00000000, 0x00000000, 0x00000003, 0x00000000, 0x0000000f,
	0x545f5653, 0x45475241, 0xabab0054
};
#elif defined(D3D11_USE_SHADER_MODEL_4_0_level_9_3)
static const DWORD D3D11_PixelShader_Texture[] =
{
	0x43425844, 0xa719d097, 0x4724c930, 0xa7bc20fb, 0x5a2d4c05, 0x00000001,
	0x00000324, 0x00000006, 0x00000038, 0x000000c0, 0x0000015c, 0x000001d8,
	0x0000027c, 0x000002f0, 0x396e6f41, 0x00000080, 0x00000080, 0xffff0200,
	0x00000058, 0x00000028, 0x00280000, 0x00280000, 0x00280000, 0x00240001,
	0x00280000, 0x00000000, 0xffff0201, 0x0200001f, 0x80000000, 0xb0030000,
	0x0200001f, 0x80000000, 0xb00f0001, 0x0200001f, 0x90000000, 0xa00f0800,
	0x03000042, 0x800f0000, 0xb0e40000, 0xa0e40800, 0x03000005, 0x800f0000,
	0x80e40000, 0xb0e40001, 0x02000001, 0x800f0800, 0x80e40000, 0x0000ffff,
	0x52444853, 0x00000094, 0x00000040, 0x00000025, 0x0300005a, 0x00106000,
	0x00000000, 0x04001858, 0x00107000, 0x00000000, 0x00005555, 0x03001062,
	0x00101032, 0x00000001, 0x03001062, 0x001010f2, 0x00000002, 0x03000065,
	0x001020f2, 0x00000000, 0x02000068, 0x00000001, 0x09000045, 0x001000f2,
	0x00000000, 0x00101046, 0x00000001, 0x00107e46, 0x00000000, 0x00106000,
	0x00000000, 0x07000038, 0x001020f2, 0x00000000, 0x00100e46, 0x00000000,
	0x00101e46, 0x00000002, 0x0100003e, 0x54415453, 0x00000074, 0x00000003,
	0x00000001, 0x00000000, 0x00000003, 0x00000001, 0x00000000, 0x00000000,
	0x00000001, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000001, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x46454452, 0x0000009c,
	0x00000000, 0x00000000, 0x00000002, 0x0000001c, 0xffff0400, 0x00008900,
	0x00000072, 0x0000005c, 0x00000003, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000001, 0x00000001, 0x00000067, 0x00000002, 0x00000005,
	0x00000004, 0xffffffff, 0x00000000, 0x00000001, 0x0000000d, 0x53656874,
	0x6c706d61, 0x74007265, 0x65546568, 0x72757478, 0x694d0065, 0x736f7263,
	0x2074666f, 0x20295228, 0x4c534c48, 0x61685320, 0x20726564, 0x706d6f43,
	0x72656c69, 0x2e303120, 0xabab0031, 0x4e475349, 0x0000006c, 0x00000003,
	0x00000008, 0x00000050, 0x00000000, 0x00000001, 0x00000003, 0x00000000,
	0x0000000f, 0x0000005c, 0x00000000, 0x00000000, 0x00000003, 0x00000001,
	0x00000303, 0x00000065, 0x00000000, 0x00000000, 0x00000003, 0x00000002,
	0x00000f0f, 0x505f5653, 0x5449534f, 0x004e4f49, 0x43584554, 0x44524f4f,
	0x4c4f4300, 0xab00524f, 0x4e47534f, 0x0000002c, 0x00000001, 0x00000008,
	0x00000020, 0x00000000, 0x00000000, 0x00000003, 0x00000000, 0x0000000f,
	0x545f5653, 0x45475241, 0xabab0054
};
#endif

#if defined(D3D11_USE_SHADER_MODEL_4_0_level_9_1)
static const DWORD D3D11_VertexShader[] =
{
	0x43425844, 0xec10259f, 0x4bd441b4, 0xba922dc3, 0x4e6fb5d2, 0x00000001,
	0x00000458, 0x00000006, 0x00000038, 0x00000118, 0x00000220, 0x0000029c,
	0x00000374, 0x000003e4, 0x396e6f41, 0x000000d8, 0x000000d8, 0xfffe0200,
	0x00000098, 0x00000040, 0x00240002, 0x003c0000, 0x003c0000, 0x00240000,
	0x003c0001, 0x00000000, 0x00010002, 0x00000000, 0x00030000, 0x00030001,
	0x00000000, 0x00000000, 0xfffe0200, 0x0200001f, 0x80000005, 0x900f0000,
	0x0200001f, 0x80010005, 0x900f0001, 0x0200001f, 0x80020005, 0x900f0002,
	0x03000005, 0x800f0000, 0x90550000, 0xa0e40002, 0x04000004, 0x800f0000,
	0x90000000, 0xa0e40001, 0x80e40000, 0x03000002, 0x800f0000, 0x80e40000,
	0xa0e40003, 0x04000004, 0xc0030000, 0x80ff0000, 0xa0e40000, 0x80e40000,
	0x02000001, 0xc00c0000, 0x80e40000, 0x02000001, 0xe0030000, 0x90e40001,
	0x02000001, 0xe00f0001, 0x90c60002, 0x0000ffff, 0x52444853, 0x00000100,
	0x00010040, 0x00000040, 0x04000059, 0x00208e46, 0x00000000, 0x00000004,
	0x0300005f, 0x00101032, 0x00000000, 0x0300005f, 0x00101032, 0x00000001,
	0x0300005f, 0x001010f2, 0x00000002, 0x04000067, 0x001020f2, 0x00000000,
	0x00000001, 0x03000065, 0x00102032, 0x00000001, 0x03000065, 0x001020f2,
	0x00000002, 0x02000068, 0x00000001, 0x08000038, 0x001000f2, 0x00000000,
	0x00101556, 0x00000000, 0x00208e46, 0x00000000, 0x00000001, 0x0a000032,
	0x001000f2, 0x00000000, 0x00101006, 0x00000000, 0x00208e46, 0x00000000,
	0x00000000, 0x00100e46, 0x00000000, 0x08000000, 0x001020f2, 0x00000000,
	0x00100e46, 0x00000000, 0x00208e46, 0x00000000, 0x00000003, 0x05000036,
	0x00102032, 0x00000001, 0x00101046, 0x00000001, 0x05000036, 0x001020f2,
	0x00000002, 0x00101c66, 0x00000002, 0x0100003e, 0x54415453, 0x00000074,
	0x00000006, 0x00000001, 0x00000000, 0x00000006, 0x00000003, 0x00000000,
	0x00000000, 0x00000001, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x46454452,
	0x000000d0, 0x00000001, 0x00000054, 0x00000001, 0x0000001c, 0xfffe0400,
	0x00008900, 0x000000a8, 0x0000003c, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000001, 0x00000001, 0x74726556, 0x68537865,
	0x72656461, 0x736e6f43, 0x746e6174, 0xabab0073, 0x0000003c, 0x00000001,
	0x0000006c, 0x00000040, 0x00000000, 0x00000000, 0x00000084, 0x00000000,
	0x00000040, 0x00000002, 0x00000098, 0x00000000, 0x6a6f7270, 0x69746365,
	0x6e416e6f, 0x65695664, 0xabab0077, 0x00030002, 0x00040004, 0x00000000,
	0x00000000, 0x7263694d, 0x666f736f, 0x52282074, 0x4c482029, 0x53204c53,
	0x65646168, 0x6f432072, 0x6c69706d, 0x31207265, 0x00312e30, 0x4e475349,
	0x00000068, 0x00000003, 0x00000008, 0x00000050, 0x00000000, 0x00000000,
	0x00000003, 0x00000000, 0x00000303, 0x00000059, 0x00000000, 0x00000000,
	0x00000003, 0x00000001, 0x00000303, 0x00000062, 0x00000000, 0x00000000,
	0x00000003, 0x00000002, 0x00000f0f, 0x49534f50, 0x4e4f4954, 0x58455400,
	0x524f4f43, 0x4f430044, 0x00524f4c, 0x4e47534f, 0x0000006c, 0x00000003,
	0x00000008, 0x00000050, 0x00000000, 0x00000001, 0x00000003, 0x00000000,
	0x0000000f, 0x0000005c, 0x00000000, 0x00000000, 0x00000003, 0x00000001,
	0x00000c03, 0x00000065, 0x00000000, 0x00000000, 0x00000003, 0x00000002,
	0x0000000f, 0x505f5653, 0x5449534f, 0x004e4f49, 0x43584554, 0x44524f4f,
	0x4c4f4300, 0xab00524f
};
#elif defined(D3D11_USE_SHADER_MODEL_4_0_level_9_3)
static const DWORD D3D11_VertexShader[] =
{
	0x43425844, 0xcc3199ab, 0x7d284d01, 0x54752bb4, 0x8d7843d8, 0x00000001,
	0x00000458, 0x00000006, 0x00000038, 0x00000118, 0x00000220, 0x0000029c,
	0x00000374, 0x000003e4, 0x396e6f41, 0x000000d8, 0x000000d8, 0xfffe0200,
	0x00000098, 0x00000040, 0x00240002, 0x003c0000, 0x003c0000, 0x00240000,
	0x003c0001, 0x00000000, 0x00010002, 0x00000000, 0x00030000, 0x00030001,
	0x00000000, 0x00000000, 0xfffe0201, 0x0200001f, 0x80000005, 0x900f0000,
	0x0200001f, 0x80010005, 0x900f0001, 0x0200001f, 0x80020005, 0x900f0002,
	0x03000005, 0x800f0000, 0x90550000, 0xa0e40002, 0x04000004, 0x800f0000,
	0x90000000, 0xa0e40001, 0x80e40000, 0x03000002, 0x800f0000, 0x80e40000,
	0xa0e40003, 0x04000004, 0xc0030000, 0x80ff0000, 0xa0e40000, 0x80e40000,
	0x02000001, 0xc00c0000, 0x80e40000, 0x02000001, 0xe0030000, 0x90e40001,
	0x02000001, 0xe00f0001, 0x90c60002, 0x0000ffff, 0x52444853, 0x00000100,
	0x00010040, 0x00000040, 0x04000059, 0x00208e46, 0x00000000, 0x00000004,
	0x0300005f, 0x00101032, 0x00000000, 0x0300005f, 0x00101032, 0x00000001,
	0x0300005f, 0x001010f2, 0x00000002, 0x04000067, 0x001020f2, 0x00000000,
	0x00000001, 0x03000065, 0x00102032, 0x00000001, 0x03000065, 0x001020f2,
	0x00000002, 0x02000068, 0x00000001, 0x08000038, 0x001000f2, 0x00000000,
	0x00101556, 0x00000000, 0x00208e46, 0x00000000, 0x00000001, 0x0a000032,
	0x001000f2, 0x00000000, 0x00101006, 0x00000000, 0x00208e46, 0x00000000,
	0x00000000, 0x00100e46, 0x00000000, 0x08000000, 0x001020f2, 0x00000000,
	0x00100e46, 0x00000000, 0x00208e46, 0x00000000, 0x00000003, 0x05000036,
	0x00102032, 0x00000001, 0x00101046, 0x00000001, 0x05000036, 0x001020f2,
	0x00000002, 0x00101c66, 0x00000002, 0x0100003e, 0x54415453, 0x00000074,
	0x00000006, 0x00000001, 0x00000000, 0x00000006, 0x00000003, 0x00000000,
	0x00000000, 0x00000001, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000002, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x46454452,
	0x000000d0, 0x00000001, 0x00000054, 0x00000001, 0x0000001c, 0xfffe0400,
	0x00008900, 0x000000a8, 0x0000003c, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000001, 0x00000001, 0x74726556, 0x68537865,
	0x72656461, 0x736e6f43, 0x746e6174, 0xabab0073, 0x0000003c, 0x00000001,
	0x0000006c, 0x00000040, 0x00000000, 0x00000000, 0x00000084, 0x00000000,
	0x00000040, 0x00000002, 0x00000098, 0x00000000, 0x6a6f7270, 0x69746365,
	0x6e416e6f, 0x65695664, 0xabab0077, 0x00030002, 0x00040004, 0x00000000,
	0x00000000, 0x7263694d, 0x666f736f, 0x52282074, 0x4c482029, 0x53204c53,
	0x65646168, 0x6f432072, 0x6c69706d, 0x31207265, 0x00312e30, 0x4e475349,
	0x00000068, 0x00000003, 0x00000008, 0x00000050, 0x00000000, 0x00000000,
	0x00000003, 0x00000000, 0x00000303, 0x00000059, 0x00000000, 0x00000000,
	0x00000003, 0x00000001, 0x00000303, 0x00000062, 0x00000000, 0x00000000,
	0x00000003, 0x00000002, 0x00000f0f, 0x49534f50, 0x4e4f4954, 0x58455400,
	0x524f4f43, 0x4f430044, 0x00524f4c, 0x4e47534f, 0x0000006c, 0x00000003,
	0x00000008, 0x00000050, 0x00000000, 0x00000001, 0x00000003, 0x00000000,
	0x0000000f, 0x0000005c, 0x00000000, 0x00000000, 0x00000003, 0x00000001,
	0x00000c03, 0x00000065, 0x00000000, 0x00000000, 0x00000003, 0x00000002,
	0x0000000f, 0x505f5653, 0x5449534f, 0x004e4f49, 0x43584554, 0x44524f4f,
	0x4c4f4300, 0xab00524f
};
#endif

#if defined(D3D11_USE_SHADER_MODEL_4_0_level_9_1)
static const DWORD D3D11_sharpen[] =
{
	0x43425844, 0x3db92f1a, 0xb1c6d66e, 0xbfdb15e8, 0xec6f6053, 0x00000001,
	0x0000073c, 0x00000006, 0x00000038, 0x00000218, 0x000004f4, 0x00000570,
	0x00000694, 0x00000708, 0x396e6f41, 0x000001d8, 0x000001d8, 0xffff0200,
	0x000001a4, 0x00000034, 0x00280001, 0x00340000, 0x00340000, 0x00240001,
	0x00340000, 0x00000000, 0x00000000, 0x00000001, 0x00000000, 0xffff0200,
	0x05000051, 0xa00f0001, 0x3e800000, 0x3f800000, 0x3dcccccd, 0xbd4ccccd,
	0x05000051, 0xa00f0002, 0x3f881062, 0x4064dd2f, 0x3eb8d4fe, 0x3f000000,
	0x0200001f, 0x80000000, 0xb0030000, 0x0200001f, 0x90000000, 0xa00f0800,
	0x03000002, 0x80010000, 0xb0000000, 0xa0000000, 0x03000002, 0x80020000,
	0xb0550000, 0xa1550000, 0x03000002, 0x80030001, 0xb0e40000, 0xa1e40000,
	0x03000002, 0x80030002, 0xb0e40000, 0xa0e40000, 0x02000001, 0x80010003,
	0xa1000000, 0x02000001, 0x80020003, 0xa0550000, 0x03000002, 0x80030003,
	0x80e40003, 0xb0e40000, 0x03000042, 0x800f0000, 0x80e40000, 0xa0e40800,
	0x03000042, 0x800f0001, 0x80e40001, 0xa0e40800, 0x03000042, 0x800f0002,
	0x80e40002, 0xa0e40800, 0x03000042, 0x800f0003, 0x80e40003, 0xa0e40800,
	0x03000042, 0x800f0004, 0xb0e40000, 0xa0e40800, 0x03000002, 0x80070000,
	0x80e40000, 0x80e40001, 0x03000002, 0x80070000, 0x80e40002, 0x80e40000,
	0x03000002, 0x80070000, 0x80e40003, 0x80e40000, 0x04000004, 0x80070000,
	0x80e40000, 0xa1000001, 0x80e40004, 0x02000001, 0x80080000, 0xa0550001,
	0x03000009, 0x80180004, 0x80e40000, 0xa0e40002, 0x04000004, 0x80080004,
	0x80ff0004, 0xa0aa0001, 0xa0ff0001, 0x03000002, 0x80170000, 0x80ff0004,
	0x80e40004, 0x02000001, 0x80080000, 0xa0550001, 0x02000001, 0x800f0800,
	0x80e40000, 0x0000ffff, 0x52444853, 0x000002d4, 0x00000040, 0x000000b5,
	0x04000059, 0x00208e46, 0x00000000, 0x00000001, 0x0300005a, 0x00106000,
	0x00000000, 0x04001858, 0x00107000, 0x00000000, 0x00005555, 0x03001062,
	0x00101032, 0x00000001, 0x03000065, 0x001020f2, 0x00000000, 0x02000068,
	0x00000002, 0x0d000032, 0x00100032, 0x00000000, 0x00208046, 0x00000000,
	0x00000000, 0x00004002, 0x3f800000, 0xbf800000, 0x00000000, 0x00000000,
	0x00101046, 0x00000001, 0x09000045, 0x001000f2, 0x00000000, 0x00100046,
	0x00000000, 0x00107e46, 0x00000000, 0x00106000, 0x00000000, 0x09000000,
	0x00100032, 0x00000001, 0x00101046, 0x00000001, 0x80208046, 0x00000041,
	0x00000000, 0x00000000, 0x09000045, 0x001000f2, 0x00000001, 0x00100046,
	0x00000001, 0x00107e46, 0x00000000, 0x00106000, 0x00000000, 0x07000000,
	0x00100072, 0x00000000, 0x00100246, 0x00000000, 0x00100246, 0x00000001,
	0x08000000, 0x00100032, 0x00000001, 0x00101046, 0x00000001, 0x00208046,
	0x00000000, 0x00000000, 0x09000045, 0x001000f2, 0x00000001, 0x00100046,
	0x00000001, 0x00107e46, 0x00000000, 0x00106000, 0x00000000, 0x07000000,
	0x00100072, 0x00000000, 0x00100246, 0x00000000, 0x00100246, 0x00000001,
	0x0e000032, 0x00100032, 0x00000001, 0x80208046, 0x00000041, 0x00000000,
	0x00000000, 0x00004002, 0x3f800000, 0xbf800000, 0x00000000, 0x00000000,
	0x00101046, 0x00000001, 0x09000045, 0x001000f2, 0x00000001, 0x00100046,
	0x00000001, 0x00107e46, 0x00000000, 0x00106000, 0x00000000, 0x07000000,
	0x00100072, 0x00000000, 0x00100246, 0x00000000, 0x00100246, 0x00000001,
	0x09000045, 0x001000f2, 0x00000001, 0x00101046, 0x00000001, 0x00107e46,
	0x00000000, 0x00106000, 0x00000000, 0x0d000032, 0x00100072, 0x00000000,
	0x80100246, 0x00000041, 0x00000000, 0x00004002, 0x3e800000, 0x3e800000,
	0x3e800000, 0x00000000, 0x00100246, 0x00000001, 0x05000036, 0x00100082,
	0x00000000, 0x00004001, 0x3f800000, 0x0a002011, 0x00100012, 0x00000000,
	0x00100e46, 0x00000000, 0x00004002, 0x3f881062, 0x4064dd2f, 0x3eb8d4fe,
	0x3f000000, 0x09000032, 0x00100012, 0x00000000, 0x0010000a, 0x00000000,
	0x00004001, 0x3dcccccd, 0x00004001, 0xbd4ccccd, 0x07002000, 0x00102072,
	0x00000000, 0x00100006, 0x00000000, 0x00100246, 0x00000001, 0x05000036,
	0x00102082, 0x00000000, 0x00004001, 0x3f800000, 0x0100003e, 0x54415453,
	0x00000074, 0x00000013, 0x00000002, 0x00000000, 0x00000002, 0x0000000b,
	0x00000000, 0x00000000, 0x00000001, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000005, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000002, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x46454452, 0x0000011c, 0x00000001, 0x000000a8, 0x00000003, 0x0000001c,
	0xffff0400, 0x00008900, 0x000000f4, 0x0000007c, 0x00000003, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000001, 0x00000001, 0x00000087,
	0x00000002, 0x00000005, 0x00000004, 0xffffffff, 0x00000000, 0x00000001,
	0x0000000d, 0x00000092, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000001, 0x00000001, 0x53656874, 0x6c706d61, 0x74007265,
	0x65546568, 0x72757478, 0x69500065, 0x536c6578, 0x65646168, 0x6e6f4372,
	0x6e617473, 0xab007374, 0x00000092, 0x00000001, 0x000000c0, 0x00000010,
	0x00000000, 0x00000000, 0x000000d8, 0x00000000, 0x00000008, 0x00000002,
	0x000000e4, 0x00000000, 0x74786574, 0x53657275, 0x00657a69, 0x00030001,
	0x00020001, 0x00000000, 0x00000000, 0x7263694d, 0x666f736f, 0x52282074,
	0x4c482029, 0x53204c53, 0x65646168, 0x6f432072, 0x6c69706d, 0x31207265,
	0x00312e30, 0x4e475349, 0x0000006c, 0x00000003, 0x00000008, 0x00000050,
	0x00000000, 0x00000001, 0x00000003, 0x00000000, 0x0000000f, 0x0000005c,
	0x00000000, 0x00000000, 0x00000003, 0x00000001, 0x00000303, 0x00000065,
	0x00000000, 0x00000000, 0x00000003, 0x00000002, 0x0000000f, 0x505f5653,
	0x5449534f, 0x004e4f49, 0x43584554, 0x44524f4f, 0x4c4f4300, 0xab00524f,
	0x4e47534f, 0x0000002c, 0x00000001, 0x00000008, 0x00000020, 0x00000000,
	0x00000000, 0x00000003, 0x00000000, 0x0000000f, 0x545f5653, 0x45475241,
	0xabab0054
};
#elif defined(D3D11_USE_SHADER_MODEL_4_0_level_9_3)
static const DWORD D3D11_sharpen[] =
{
	0x43425844, 0x302ff757, 0x01efa8b6, 0xe47b65b9, 0xd2b6d2ce, 0x00000001,
	0x00000740, 0x00000006, 0x00000038, 0x0000021c, 0x000004f8, 0x00000574,
	0x00000698, 0x0000070c, 0x396e6f41, 0x000001dc, 0x000001dc, 0xffff0200,
	0x000001a8, 0x00000034, 0x00280001, 0x00340000, 0x00340000, 0x00240001,
	0x00340000, 0x00000000, 0x00000000, 0x00000001, 0x00000000, 0xffff0201,
	0x05000051, 0xa00f0001, 0x3f800000, 0xbf800000, 0x3e800000, 0x00000000,
	0x05000051, 0xa00f0002, 0x3f881062, 0x4064dd2f, 0x3eb8d4fe, 0x3f000000,
	0x05000051, 0xa00f0003, 0x3dcccccd, 0xbd4ccccd, 0x00000000, 0x00000000,
	0x0200001f, 0x80000000, 0xb0030000, 0x0200001f, 0x90000000, 0xa00f0800,
	0x02000001, 0x80030000, 0xa0e40001, 0x04000004, 0x80030001, 0xa0e40000,
	0x80e40000, 0xb0e40000, 0x03000002, 0x80030002, 0xb0e40000, 0xa1e40000,
	0x03000042, 0x800f0001, 0x80e40001, 0xa0e40800, 0x03000042, 0x800f0002,
	0x80e40002, 0xa0e40800, 0x03000002, 0x80070001, 0x80e40001, 0x80e40002,
	0x03000002, 0x80030002, 0xb0e40000, 0xa0e40000, 0x04000004, 0x80030000,
	0xa0e40000, 0x81e40000, 0xb0e40000, 0x03000042, 0x800f0002, 0x80e40002,
	0xa0e40800, 0x03000042, 0x800f0000, 0x80e40000, 0xa0e40800, 0x03000002,
	0x80070001, 0x80e40001, 0x80e40002, 0x03000002, 0x80070000, 0x80e40000,
	0x80e40001, 0x03000042, 0x800f0001, 0xb0e40000, 0xa0e40800, 0x04000004,
	0x80070000, 0x80e40000, 0xa1aa0001, 0x80e40001, 0x02000001, 0x80080000,
	0xa0000001, 0x03000009, 0x80180001, 0x80e40000, 0xa0e40002, 0x04000004,
	0x80080001, 0x80ff0001, 0xa0000003, 0xa0550003, 0x03000002, 0x80170000,
	0x80ff0001, 0x80e40001, 0x02000001, 0x80080000, 0xa0000001, 0x02000001,
	0x800f0800, 0x80e40000, 0x0000ffff, 0x52444853, 0x000002d4, 0x00000040,
	0x000000b5, 0x04000059, 0x00208e46, 0x00000000, 0x00000001, 0x0300005a,
	0x00106000, 0x00000000, 0x04001858, 0x00107000, 0x00000000, 0x00005555,
	0x03001062, 0x00101032, 0x00000001, 0x03000065, 0x001020f2, 0x00000000,
	0x02000068, 0x00000002, 0x0d000032, 0x00100032, 0x00000000, 0x00208046,
	0x00000000, 0x00000000, 0x00004002, 0x3f800000, 0xbf800000, 0x00000000,
	0x00000000, 0x00101046, 0x00000001, 0x09000045, 0x001000f2, 0x00000000,
	0x00100046, 0x00000000, 0x00107e46, 0x00000000, 0x00106000, 0x00000000,
	0x09000000, 0x00100032, 0x00000001, 0x00101046, 0x00000001, 0x80208046,
	0x00000041, 0x00000000, 0x00000000, 0x09000045, 0x001000f2, 0x00000001,
	0x00100046, 0x00000001, 0x00107e46, 0x00000000, 0x00106000, 0x00000000,
	0x07000000, 0x00100072, 0x00000000, 0x00100246, 0x00000000, 0x00100246,
	0x00000001, 0x08000000, 0x00100032, 0x00000001, 0x00101046, 0x00000001,
	0x00208046, 0x00000000, 0x00000000, 0x09000045, 0x001000f2, 0x00000001,
	0x00100046, 0x00000001, 0x00107e46, 0x00000000, 0x00106000, 0x00000000,
	0x07000000, 0x00100072, 0x00000000, 0x00100246, 0x00000000, 0x00100246,
	0x00000001, 0x0e000032, 0x00100032, 0x00000001, 0x80208046, 0x00000041,
	0x00000000, 0x00000000, 0x00004002, 0x3f800000, 0xbf800000, 0x00000000,
	0x00000000, 0x00101046, 0x00000001, 0x09000045, 0x001000f2, 0x00000001,
	0x00100046, 0x00000001, 0x00107e46, 0x00000000, 0x00106000, 0x00000000,
	0x07000000, 0x00100072, 0x00000000, 0x00100246, 0x00000000, 0x00100246,
	0x00000001, 0x09000045, 0x001000f2, 0x00000001, 0x00101046, 0x00000001,
	0x00107e46, 0x00000000, 0x00106000, 0x00000000, 0x0d000032, 0x00100072,
	0x00000000, 0x80100246, 0x00000041, 0x00000000, 0x00004002, 0x3e800000,
	0x3e800000, 0x3e800000, 0x00000000, 0x00100246, 0x00000001, 0x05000036,
	0x00100082, 0x00000000, 0x00004001, 0x3f800000, 0x0a002011, 0x00100012,
	0x00000000, 0x00100e46, 0x00000000, 0x00004002, 0x3f881062, 0x4064dd2f,
	0x3eb8d4fe, 0x3f000000, 0x09000032, 0x00100012, 0x00000000, 0x0010000a,
	0x00000000, 0x00004001, 0x3dcccccd, 0x00004001, 0xbd4ccccd, 0x07002000,
	0x00102072, 0x00000000, 0x00100006, 0x00000000, 0x00100246, 0x00000001,
	0x05000036, 0x00102082, 0x00000000, 0x00004001, 0x3f800000, 0x0100003e,
	0x54415453, 0x00000074, 0x00000013, 0x00000002, 0x00000000, 0x00000002,
	0x0000000b, 0x00000000, 0x00000000, 0x00000001, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000005, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000002, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x46454452, 0x0000011c, 0x00000001, 0x000000a8, 0x00000003,
	0x0000001c, 0xffff0400, 0x00008900, 0x000000f4, 0x0000007c, 0x00000003,
	0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000001, 0x00000001,
	0x00000087, 0x00000002, 0x00000005, 0x00000004, 0xffffffff, 0x00000000,
	0x00000001, 0x0000000d, 0x00000092, 0x00000000, 0x00000000, 0x00000000,
	0x00000000, 0x00000000, 0x00000001, 0x00000001, 0x53656874, 0x6c706d61,
	0x74007265, 0x65546568, 0x72757478, 0x69500065, 0x536c6578, 0x65646168,
	0x6e6f4372, 0x6e617473, 0xab007374, 0x00000092, 0x00000001, 0x000000c0,
	0x00000010, 0x00000000, 0x00000000, 0x000000d8, 0x00000000, 0x00000008,
	0x00000002, 0x000000e4, 0x00000000, 0x74786574, 0x53657275, 0x00657a69,
	0x00030001, 0x00020001, 0x00000000, 0x00000000, 0x7263694d, 0x666f736f,
	0x52282074, 0x4c482029, 0x53204c53, 0x65646168, 0x6f432072, 0x6c69706d,
	0x31207265, 0x00312e30, 0x4e475349, 0x0000006c, 0x00000003, 0x00000008,
	0x00000050, 0x00000000, 0x00000001, 0x00000003, 0x00000000, 0x0000000f,
	0x0000005c, 0x00000000, 0x00000000, 0x00000003, 0x00000001, 0x00000303,
	0x00000065, 0x00000000, 0x00000000, 0x00000003, 0x00000002, 0x0000000f,
	0x505f5653, 0x5449534f, 0x004e4f49, 0x43584554, 0x44524f4f, 0x4c4f4300,
	0xab00524f, 0x4e47534f, 0x0000002c, 0x00000001, 0x00000008, 0x00000020,
	0x00000000, 0x00000000, 0x00000003, 0x00000000, 0x0000000f, 0x545f5653,
	0x45475241, 0xabab0054
};
#endif

#endif
#endif /* __FILE_SURFACE_DIRECT3D11_h_ */
